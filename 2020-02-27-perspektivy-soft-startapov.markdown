---
layout: post
title: "Перспективы софт-стартапов"
date: 2020-02-27 16:00:00 +0300
categories: talk
---

После обеда на моционе снова с коллегой обсуждали перспективы реализации разных идей и чёт захотелось сдампить недавние мысли о том, какой стартап *можно было бы* начинать сейчас, чтобы года через два-три выйти на рынок. Рамки такие:
* посильно *начать* одним компетентным человеком;
* отсутствие привязки к производству и географии;
* отсутствие риска больших вложений;
* отсутствие риска несоответствия сертификациям (и преследований в случае чего).

Ну и чтобы было мне интересным. Финтех не интересно. Ботва вокруг массового общения (соцсети и соцчаты) не интересно. Бигдата тоже. Блокчейны тоже. А вот всякое техническое с потрошками железными интересно.

Итак, быстрый дамп идей с обоснованием. Ясно, что это мысли в воздух, а не уверенный бизнес-план. Что-то так и вовсе калька с уже начатых бизнесов.

---

**Во-первых**, интересна тенденция оснащать мобильные гаджеты «медицинскими» датчиками. Скажем, Samsung вроде как в Galaxy Note 20 влепит датчики ЭМГ, ЭЭГ и ЭКГ. Вместе с удешевлением датчиков (переход с флагманов на серединку) и ростом ассортимента может здорово накопиться нужда в софте, который мониторит тебя (и твою семью), собирает всё, анализирует, выдаёт рекомендации.

**Во-вторых**, интересна тенденция к параноидальным настроениям на тему *«большие братья смотрят на меня через гаджеты»*. Крутится в голове идея софтовых *«сейфов»* (в которые складывать всё деликатное от паролей до кредиток) или железных бытовых защищённых *«облачков»* (условно: какая-нибудь Raspberry Pi за семью замками). Суть в том, чтобы в _бытовой_ привычной сфере появились софтовые аналоги бытовых сейфов мелкого хранения.

**В-третьих**, смартфоны и планшеты давно по вычислительной мощи смахивают на 10..15-летней давности сервера. Вполне могу представить ситуацию, в которой куда-нибудь приходит админопс, подключает свой смартфон к местной сети, а на смарте у него поднят полноценный серверок, на который чувак во время починки заходит, чтобы что-нибудь скачать, проверить, попинговать с него и т.д.

**В-четвёртых**, продвинутые анализаторы кода, дающие разные срезы в более продвинутом виде, чем современный плоский. Тут фиг сформулируешь, но чёт надоело из года в год читать / смотреть в фантастике всякое прикольное вроде светящихся 7D-интерфейсов, в которых плохой код буквально *воняет*, а в реальной жизни всё время пыриться в... плоское 2D. Да, анализ кода прогрессирует количественно, но не качественно. Раздражает застоем. В этой теме интересно и то, что крайне малому количеству бойцов вообще можно объяснить, в чём тут проблема.

**В-пятых**, виртуальные лаборатории. Ну или можно назвать их иначе. Особенность подавляющей части софта, моделирующего какие-либо процессы, в том, что это софт... м... моделирования. Грубо говоря, вы увидите числа, графики, иконки (грубый пример -- осциллограф со стрелкой Латыниной). Совершенно другой опыт [обучения] -- тот же софт, но визуализирующий модель так, словно вы руками работаете с колбами, засеваете огород, выкапываете руду, создаёте механизм часов, паяете и т.п. Можно сказать, какая-нибудь игра *«Ферма»* или *«Алхимия»*, но на взрослом уровне, её *«прохождение»* завершится для человека получением вполне реальных [ментальных] навыков и знаний в объёме специальности. Ближайший аналог -- виртуальные кабины пилотов. Разница в том, что вместо большой кабины у пользователя планшет, а вместо такой специфической специальности получение более общих знаний в более игровом процессе. Только не надо кидать мне в личку стопки *«Ферм»* или *«Алхимий»*, пожалуйста, я и без того уже десятки их просмотрел, всё фигня для забавы, а не для развития.

**В-шестых**, кажется свободной ниша современного учебного языка программирования. Ни один из ЯП верхней десятки списка TIOBE не является учебным -- простым, наглядным, цельным, выразительным и т.п., да ещё чтобы отражал 2020 год. В какой-то мере удачными учебными были BASIC (в его синтаксической части), Smalltalk (в его визуальной части), Pascal (в его CS-части). Языки вроде Scratch слишком детские. Языки вроде Python и JavaScript... достаточно понаблюдать за тем, как ломаются об них нулевые первокурсники, честно пытающиеся понять, зачем вот ЭТО и вот ЭТО. В общем, есть о чём подумать.

---

В целом всё по векторам:
* носимая с собою мощь вычтеха на человеке растёт, количество носимых датчиков тоже с каждым годом ширится (ещё недавно гироскопы были новинкой); странно это использовать так же, как использовали во времена Nokia 3310;
* стремление человека поставить стену между своей жизнью и любопытством внешнего мира (компании, хакеры, силовики, etc) всё сильнее; но нет средств тёте Любе поставить эту стену одной кнопкой;
* обучение отстаёт от прогресса, по факту на современном оборудовании эмулируем листание книг, прослушивание и просматривание лектора, болтовню с соседом по парте; крайне мало решений класса «смоделированное отражение реального мира, доступное для манипуляций» (при том, что, повторю, вычтех уже достаточен для такого);
* разработка застыла на стадии «плоскими буквами на плоском экране напишу плоский текст» -- если посмотреть курс MIT 6.001 Structure and Interpretation 1986, а затем посмотреть на календарь, возникает вопрос: почему 35-летней давности лекция со скринами исходника актуальна до сих пор в части представления исходного кода и разработки?

Как-то так. Уф, полегчало.
