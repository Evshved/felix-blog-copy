---
layout: post
title: "Как заработать больше посудомойки"
date: 2018-08-01 14:54:27 +0300
categories: talk
---
Твитторская вакханалия *"один лайк — один факт"* не обошла стороной, потому полным заголовком этого списка был бы твит *"1 лайк — один твит о том, как зарабатывать больше посудомойки сетевой забегаловки в Москве"*. Получился вполне цельный вариант. Один из, конечно, а не единственный, но именно он мне кажется достаточно надёжным, разумным и стратегически правильным.

---

**1**. Надо меньше тратить. То, что вы экономите, не оплачивая фигню, вы пустите дальше на учёбу и работу. Как минимум, вам нужны компьютер и интернет.

**2**. Напишите список из десяти специальностей, которыми вам хотелось бы заниматься. Откройте сайты вакансий, найдите эти специальности и в своём списке напротив каждой проставьте минимальную зарплату начинающего без опыта. Порыдайте над результатом.

**3**. Оставьте все специальности, у которых устраивает минимальная зарплата. Теперь уберите из них все, которые невозможно освоить самостоятельно. Оперный певец круто, но нет. Экономист круто, но без диплома нет.

**4**. После этого у вас либо пустой список, либо остаётся *"разработчик [программного обеспечения]"*. Да, это единственная специальность, которую вы можете освоить прям дома самостоятельно в разумные сроки, и войти в тусовочку пацанов, упоротых по смузи и Лондону.

**5**. Если у вас нет компьютера, купите. Лучше ноутбук 13"..15", можно б/у. Главное в нём — процессор и оперативная память. Остальное пофиг, только на экран сначала посмотрите. От совсем плохих глаза вытекут за сутки.

**6**. Вы будете учить язык Python. Нет, не JavaScript и не вёрстку. Именно Python, т.к. только так вы дёшево для головы получите хоть поверхностное и немного ущербное, но знание разных вариантов разработки.

**7**. Освободите в будни 2 часа (30 минут чтение, 90 минут практика) без разрыва, которые вы обязательно используете для учёбы. В эти часы вас запрещено трогать, вы не пьёте, не тусите, не смотрите кино, вы учитесь. В выходные 3 часа (60 минут чтение, 120 минут практика).

**8**. Ваша первая книга [Bryson Payne. *Teach Your Kids to Code*. No Starch Press, 2015]. Вы ничего не знаете, она вам норм. 300 страниц очень, очень лёгкого текста с картинками. Так вы проведёте первый месяц, пробивая порог входа и набивая первые шишки.

**9**. На второй месяц пора ставить IDE. Это будет [PyCharm CE](https://www.jetbrains.com/pycharm/). Неделю потратите на то, чтобы настроить, обнаружить и запомнить нужные кнопки, запустить в нём ваши ранние эксперименты. Нет, другие IDE ставить не надо. Станете старше, решите сами. Сейчас PyCharm.

**10**. Теперь вам надо набивать руку на микропроектиках и заполнять память языком. Ну и не помереть с непривычки. Потому [Paul Barry. *Head First Python*. O'Reilly, 2016]. Книга на два месяца, много картинок, язык простой, всё на пальцах, но информации больше.

**11**. Всё, вы офигенно крутой питониста, потому учите [Django](https://www.djangoproject.com) в качестве первого фреймворка. Помогут [Django Tutorial](https://docs.djangoproject.com/en/2.0/intro/), чугуниевый зад и любые книги, т.к. хороших всё равно нет. Придумайте себе простой проект (магазин вышиванок, например) и делайте его, пока не сделаете.

**12**. Ладно, пошутил. Вы всё ещё ничего не знаете, потому месяц поиграйте с алгоритмами и структурами данных: [Problem Solving with Algorithms and Data Structures using Python](http://interactivepython.org/runestone/static/pythonds/index.html) Хоть базовое, хоть простое, но в голову должно войти. Если не войдёт, вас никто не будет любить так, как надо.

**13**. Отворачиваемся от Python, смотрим на базы данных. Берём книгу [Thomas Nield. *Getting Started with SQL*. O’Reilly, 2016] и прорабатываем её всю от обложки до обложки. На неё у вас должно уйти 2..3 недели, не больше.

**14**. Если ещё почему-то не, заведите аккаунт на [GitHub](https://github.com) и перевезите все свои поделки на него. Да, они ужасные и корявые, никто не будет читать, всем пофиг, а вам надо освоить git. Пусть уйдёт неделя.

**15**. Отдых! Читаем [Катрин Пассиг, Йоханнес Яндер. *Программирование без дураков*. Питер, 2017]. Весёлая и толковая книга, заменяющая будущим джуниорам более серьёзные труды. Выделяем на неё месяц. Читать вдумчиво, осмыслять, примерять к прошедшим месяцам.

**16**. Чарующий мир красивых страничек со снежинками откроет книга [Jon Duckett. *HTML and CSS: Design and Build Websites*. Wiley, 2011]. Ей семь лет, она знатно устарела, но я не знаю более крутой, красивой и доступной книги, вводящей в вёрстку. Полтора месяца, наслаждайтесь.

**17**. После отдыха и красот вернёмся к пункту 11. Django и маленький магазин чего-нибудь. Чтобы база данных была, странички и всё прочее. Вы всё равно напишете фигню, но старайтесь. Не ленитесь возвращаться к раннему материалу. Один месяц.

**18**. Прошло 8.5 месяцев. Отдохните. Топайте на [HackerRank](https://www.hackerrank.com) и прорешайте там задачки из всех областей, на которые вас хватает. Заодно подтянете снова забытое, набьёте пальцы на новом. Две недели.

**19**. Теперь важное. Вы должны понимать тестирование своего кода и уметь. Без этого вы мина под попой, а не джуниор. Упорно осваиваем [Harry J. W. Percival. *Test-Driven Development with Python*. O'Reilly, 2017]. Полтора месяца. Книга годная, в ней не только про тестирование есть.

**20**. Ожидаемый пункт: обложите тестами свой магазин вышиванок. Все триста ошибок надо будет исправить. Потом те сто, что появились из-за исправлений. Две недели.

**21**. Теперь думаем (наконец-то). Что больше нравится, страницы верстать или остальное? Выбор между фронтендом и бекендом. Погуглите про эти специальности, подумайте много раз. Они разные. Сразу развивать обе надорвётесь. Если выбрали бекенд, читаем дальше.

**22**. Идём на [HeadHunter](http://hh.ru), ищем Python junior. Выписываем из требований всё, что вы не знаете, сортируем список по кол-ву вакансий. Если в 10 вакансиях слово *"MongoDB"* попадается 10 раз, вам есть куда развиваться. Ещё пару месяцев учите то, что сверху списка.

**23**. Переписывайте магазин вышиванок с использованием максимального кол-ва технологий, требуемых в вакансиях Python junior. Не забываем про тесты. Ну... Ещё месяц. По пути добавляйте в магазин фенечки. Корзину, письма заказов, рекомендации нейронной сети (хаха) и т.п.

**24**. Неделю отдыхайте, потом тридцать три раза вылизывайте код магазина. Это ваш magnum opus, который покажете и будете защищать на собеседованиях, если захотят посмотреть на исходник. Оформите проект так, как делают крутые пацаны — изучите чужие проекты, ту же Django.

**25**. Теперь соберите ВСЕ вакансии Python junior, которые хоть как вас втискивают (если от джуна ждут 5 лет опыта, вы не). Разделите на три части: *"не хочу"*, *"фиг знает"*, *"хочу"*. Идите на собеседования к первым. Смысл в получении опыта собеседований, а не в офере.

**26**. Вам причинили боль, унизили, показали, что вы на дне знаний. Это обычно. Главное не хлопать ушами и запоминать, что спрашивают. Чем частотнее вопрос, тем лучше, значит, модно сейчас. После этой стопки учите то, отсутствие чего выявили собеседования. Для того и ходили.

**27**. Иди во вторую часть списка. Тот же алгоритм действий, но вы уже морально готовы и знаете больше. Если не тупили за год, один-два офера получите. Это запасной вариант, к нему можно будет вернуться, если не спешно давят с наймом (что подозрительно).

**28**. Третья часть списка интересная. Многие годные вакансии от джуна чудес не ждут, окромя *"уверенного"* или *"хорошего"* знания языка. Ну т.е. фиг с опытом, но заучить синтаксис и библиотеки мозгов должно хватить, иначе смысл. Потому пока мы туда не идём.

**29**. Две недели вы готовитесь. А именно учите Python снова, но по взрослой книге: [Alex Martelli. *Python in a Nutshell*. O'Reilly, 2017]. Даже не учите, но выбираете из неё то, что забыли, не выучили раньше, не поняли и т.п. Книга-справочник.

**30**. Топайте на собеседования в третью часть списка. Выспитесь. Отдохните. Не напрягайте нервы. Все знают, что вы джуниор. Если память не дырявая, слова складывать умеете и что-то осмысляли, а не только зубрили, оферы у вас будут. От 50К до 100К в зависимости от.

**31**. Главная задача — проработать не меньше года. Учитесь работать как вообще, так и в коллективе. Берите все знания, что дают. Это будет адовый год работы, учёбы и *"я тупое ничтожество и ничего не умею"*. Это нормально. Вы ничего не умеете. Учитесь уметь.

**32.0**. Также вы должны продолжать накачиваться книгами. В них системные знания, они трамплин для дальнейшего освоения. Важно понять и принять, что вы пока junior junior, а не junior. Очень мало знаний про OS, базы данных, шаблоны, архитектуры, компьютеры, разный нужный софт.

**32.1**. Потому читаем. Python: [Mike Pirnat. *How to Make Mistakes in Python*. O'Reilly, 2015] — полезная брошюра, старая [David Beazley, Brian K. Jones. *Python Cookbook*. O'Reilly, 2013] и новая [Steven F. Lott. *Modern Python Cookbook*. Packt, 2016] для мелких хинтов.

**32.2**. Потому читаем. Эрудиция: серия *In Seven Weeks* попсовая, но даст вам понять, что мир сложнее и многомернее. Попробуйте [Luc Perkins, Eric Redmond, Jim Wilson. *Seven Databases*. Pragmatic, 2018] и [Paul Butcher. *Seven Concurrency Models*. Pragmatic, 2014].

**32.3**. Потому читаем. Linux: [Christine Bresnahan, Richard Blum. *Linux Essentials*. Sybex, 2015] — чуть устарела, скучновата, но простым языком для самых маленьких. Пробить порог входа, а дальше уже крутиться, как получится. Без Linux вы будете страдать, потому надо, надо.

**32.4**. Потому читаем. Классика: [Charles Petzold. *Code*. Microsoft Press, 2000] — очень доступная книга о битах, байтах, кодах и т.п. Я б её школоте в информатику добавил. Если вштырит, читайте [Henry S. Warren. *Hacker's Delight*. Addison-Wesley, 2012] — брулянт, а не книга.

**33**. Всё. После года учёбы и года работы вы должны понимать, что вам нравится, в чём вы сильны, а в чём слабы. У вас год опыта в трудовой, что открывает двери к вакансиям, на которых не хотят учить малышей (потому ставят лимит в год+). И да, зарплата посудомойки 30К. У вас больше.

---

При чтении этого списка надо помнить следующее: список для тех, кто прям совсем нулевой. Не выпускник годного физмата с опытом трёхлетнего фриланса, например, но человек, который только пользуется компьютером, но хочет попробовать пользоваться им круче, да и вообще уехать в Дублин или Лондон кошмарить тамошних CEO от Google и Facebook. Также должно быть понятно, что таким новичкам не надо давать читать Кнута, Мартина (он лёгкий и клёвый, но слишком много спорного), Макконнелла, Дейта и т.д. В голове у начинающих и без того каша, а такими снарядами только волю к жизни убивать в первый год этой жизни. Станут старше в специальности, тогда и осилят. Наконец, текст выше про ремесло. Так не получить конструктора, инженера, изобретателя за год. Получится боец, умело красящий заборы или таскающий мешки с песком в нужные для мешков места. На старте больше и не требуется.

PS. Ну и да, всё станет интереснее, если вам будет помогать знакомый разработчик. В идеале муж или жена, чтобы можно было ночью разбудить и красными глазами напугать. Дерзайте, в общем. У девяти уже к третьему месяцу азарт пропадёт, а вот один прорвётся к финишу.
