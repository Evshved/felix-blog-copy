---
layout: post
title: "Miscellanea XIX"
date: 2018-03-19 15:01:38 +0300
categories: miscellanea
---
Чем дольше разработчик работает на одном месте, тем больше у него багаж ситуаций, в которых сделали фигню и это *прокатило*. То на прод вне тестирования катнули. То руками пошевелили в мастере базы. То тихонько забили на инструкцию. А дальше роль личности. Либо этот багаж мотивирует больше никогда так не делать, либо человеческое берёт верх и качество специалиста падает. Потому на старичков надо смотреть внимательнее.

---

Вот занятно. До последнего поколения у языков были авторы-люди. C++ создал Страуструп, C создали Ритчи и Томпсон, Python Гвидо, Java Гослинг и т.д. Сейчас время больших батальонов, что косвенно выражается в уходе личностей за ширму. Да, у любого языка есть конкретные авторы, но Go — это Google, Swift — Apple, Rust — Mozilla, Kotlin — JetBrains. И вроде объективно ничего не изменилось, раньше языки тоже появлялись или активно развивались внутри компаний, но вот.

---

Между тем, в мире разворачивается драма из высших уровней кровавого энтерпрайза. Раскручивать содержание темы можно от [Phoenix Pay System](https://en.wikipedia.org/wiki/Phoenix_Pay_System), ленивым кратко перескажу. В 2009 году правительство Канады решило заменить свою 40-летней давности систему начисления и выплат зарплат, ну и вообще автоматизировать и экономить. Выбор пал на IBM с Oracle. Пацаны вроде крутые, опытные, будет счастье. В 2016 году систему запустили, с тех пор мечтают погасить, ибо бракобажище [получилось](https://www.theregister.co.uk/2018/03/02/canada_payroll_system_phoenix/) лютейшее, что при общих тратах бюджета в $790M несколько фраппирует канадскую общественность. С другой половины планеты одобряюще улюлюкают австралийцы, [наступившие](https://ipolitics.ca/2016/10/05/australian-case-similar-to-phoenix-pay-debacle-wasnt-on-governments-radar/) на эту мину ранее. Оба кейса интересны тем, что большой бизнес может по контракту поставлять неработающие решения за огромные деньги и не пострадать. Совсем другие правила игры.

---

[ALGOL](https://en.wikipedia.org/wiki/ALGOL) любопытен тем, что этот язык очень, очень повлиял на развитие программирования, но при этом почти не использовался в разработке. Даже была шутка 60-х: ALGOL нужен для того, чтобы описать алгоритм, а потом реализовать его на FORTRAN. Одна из основных причин, если верить копипасте из статей в статьи — чуваки не стандартизировали I/O, что для промышленной разработки фу и кака. Ситуацию в какой-то мере выправляли диалекты (вроде [ALGOL W](https://en.wikipedia.org/wiki/ALGOL_W)), но язык это не спасло. Как был очень влиятельным, но академическим, так и остался.

---

Иногда встречаю разработчиков, которые считают, что знают Java, если у них опыт работы и знание Java 7, не дальше. Народ. Между Java 7 (2011 год) и Java 8 (2014 год) пропасть (стримы, лямбды, default и static в интерфейсах, новый Time API и т.д.). В 2018 году вообще уже пора Java 9 осваивать и про Java 10 думать. Хочется спросить, почему за 4 года вне работы, если она прибила семёрку гвоздями, не освоил изменения? Пофиг было? Тогда зачем "джавист"? Не надо так.
